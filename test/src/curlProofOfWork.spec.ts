/**
 * Tests for CurlProofOfWork.
 */
import { Curl } from "@iota-pico/crypto/dist/tritHashers/curl";
import { Trits } from "@iota-pico/data/dist/data/trits";
import { Trytes } from "@iota-pico/data/dist/data/trytes";
import chai from "chai";
import { CurlProofOfWork } from "../../dist/curlProofOfWork";

describe("CurlProofOfWork", () => {
    it("can be created", () => {
        const obj = new CurlProofOfWork();
        chai.should().exist(obj);
    });

    describe("pow", () => {
        it("can successfully complete", async () => {
            // tslint:disable-next-line:max-line-length
            const trinaryString = "9999999999999999999999999999999999999999A9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999V9UDLYQOSKMQSOGWOFAAJNOTSKPCAXQLBLBFPVXQVPAZCPGXH9BAFFCGUAOWDSWZBFIFWJBKFPEBVMLHDQJA999999999999999999999999IOTA9TRANSFER99999999999999VOCVKWD99C99999999C99999999RBS9KXNCCXWMZTKNLGOZBUDJBXNVFTORHQQDWIFEZDHQQNHABHGYEUKEOJRNTVPR9YEFDPPSXIQUXLABNTBWNHCZNI9DTYABMJOZNFELDUNQTJHFK9QPGHRTWOMHWDZGRYGJI9EXJWYSQQICWMEFVGBRJMQVC99999YXZBCAUKSAPPIWRXXEKYKI9WRVJXVBNJ9DRGZHJHRGTPGKGBEUPOCKSVVOURYAOJFXKNRXHJHSCK99999";

            const obj = new CurlProofOfWork();
            obj.initialize();

            obj.pow(Trytes.create(trinaryString), 9)
                .then((nonce) => {
                    const nonceString = nonce.toString();
                    chai.expect(nonceString).to.be.equal("BFIP9DKWUKOXDKNUJSZVCQQTTYACTONUCYXDTQOBZLVFUAY9VCHPFRPPXAJQXFYDFEAICDPSHFZIJGIMH");

                    const curlHash = new Curl();
                    curlHash.initialize(Array.from(new Int32Array(Curl.STATE_LENGTH)));
                    const transactionTrits = Trits.fromTrytes(Trytes.create(trinaryString.substr(0, 2673 - 81).concat(nonceString)));
                    curlHash.absorb(transactionTrits, 0, transactionTrits.length());

                    const transactionHash = Trits.fromValue(Array.from(new Int32Array(Curl.HASH_LENGTH)));
                    curlHash.squeeze(transactionHash, 0, Curl.HASH_LENGTH);

                    chai.expect(transactionHash.toTrytes().toString()).to.be.equal("9HZAYLWVBGUELDJNVCRQUTLTHIOJQ9SG9VMEPESEDEFMIMXLZJVGALMCNGRJEWVTQZBRGMNH9DKLOY999");
                })
                .catch(err => {
                    chai.assert.fail(err);
                });
        });
    });
});
